/**
@mainpage

## Introduction
With this project I aim at building a modular and easy to integrate **C++ framework** for performing **Bayesian inference** and **mathematical optimization** tasks in **high-dimensional models**.

While there are several MCMC algorithms available for the software environment [R](https://www.r-project.org/), similar options for the C++ language, which is still a popular choice for scientific high-performance computations, are limited.

In order to allow for a future proof and robust code base with intuitive extensibility and good integrability of the library into existing C++ projects, I'd like to meet the following design criteria:
- Limited use of 3rd party libraries for better **maintainability** and control of dependencies.
  - The only mandatory requirement for now are the [Boost C++ libraries](http://www.boost.org/). Most of them are peer-reviewed, well documented and follow decent style guidelines. Especially the numeric, linear algebra and statistical utilities are extremely helpful in the start of this project.
  - Although popular among scientists, I have ruled out to interface with [ROOT](https://root.cern.ch) directly. Its API is cluttered, the code style heavily disputed and linux installation packages are not reliably maintained.
- Modern **object-oriented C++11** style with dashes of functional programming and templating magic where justifiable.
- Thread-safety to make way for multi-core parallelization.
- Unit testing (Google Test) and code annotations (Doxygen).

## Status
- Build system, unit testing and continuous integration set up.
- Numeric + logging utilities and random number generator interfaces implemented.
- Basic classes and interfaces for proposal functions and samplers declared.
- First running example for a simple Metropolis-Hastings algorithm.

## Supported compilers and operating systems
Essentially, all C++11 compliant compilers should work.
Currently the build is being tested on [Travis CI](https://travis-ci.org/mkleesiek/fast-mcmc.svg?branch=master) using the following OS/compiler combinations:
- Ubuntu Trusty (14.04)
  - g++ 4.8.4
  - g++ 5.3.0
  - g++ 6.1.1
  - clang++ 3.5
  - clang++ 3.9
- OS X El Capitan (10.11.5)
  - Xcode (clang) 7.3
  
**/